datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator dacha_client {
  provider = "prisma-client-js"
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum OrderStatus {
  cancelled @map("cancelled")
  progress  @map("progress")
  success   @map("success")
}

enum NotificationStatus {
  new
  seen
}

enum CottageStatus {
  progress
  confirmed
  rejected
}

enum NotificationType {
  personal
  public
}

enum ServiceCode {
  top
  recommended
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  image      String?      @map("image") @db.VarChar()
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  status     Status        @default(inactive) @map("status")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model Region {
  id      String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name    String    @map("name") @db.Uuid
  places  Place[]
  cottage Cottage[]

  @@id([id])
  @@map("region")
}

model Place {
  id       String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String @map("name") @db.Uuid
  image    String @map("image") @db.VarChar()
  regionId String @map("region_id") @db.Uuid

  region  Region    @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cottage Cottage[]

  @@id([id])
  @@map("place")
}

model CottageType {
  id   String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name String @map("name") @db.Uuid

  @@id([id])
  @@map("cottage_type")
}

model Comfort {
  id    String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name  String @map("name") @db.Uuid
  image String @map("image") @db.VarChar()

  @@id([id])
  @@map("comfort")
}

model CottageImage {
  id          String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  image       String   @map("image") @db.VarChar()
  status      Status   @default(active) @map("status")
  isMainImage Boolean  @default(false) @map("main_image")
  cottage     Cottage? @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cottageId   String   @map("cottage_id") @db.Uuid
  created_at  DateTime @default(now()) @map("created_at") @db.Timestamp()

  @@id([id])
  @@map("cottage_image")
}

model Cottage {
  id            String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name          String        @map("name") @db.VarChar()
  rating        Float         @map("rating") @db.Real
  description   String        @map("description") @db.VarChar()
  cottageType   String[]      @map("cottage_type")
  cottageStatus CottageStatus @default(progress) @map("cottage_status")
  price         Float         @map("price") @db.Real
  priceWeekend  Float         @map("price_weekend") @db.Real
  status        Status        @default(active) @map("status")
  comforts      String[]      @map("comforts") @db.Uuid
  regionId      String        @map("region_id") @db.Uuid
  placeId       String        @map("place_id") @db.Uuid
  longitude     String?       @map("longitude") @db.VarChar()
  latitude      String?       @map("lattitude") @db.VarChar()
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  createdBy     String        @map("user_id") @db.Uuid
  isTest        Boolean       @default(false) @map("is_test") @db.Boolean

  region Region         @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  place  Place          @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images CottageImage[]
  Orders Orders[]

  @@id([id])
  @@map("cottage")
}

model Notification {
  id           String             @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  message      String             @map("message") @db.VarChar()
  type         NotificationType   @default(personal) @map("type")
  status       NotificationStatus @default(new) @map("status")
  userId       String?            @map("user_id") @db.Uuid
  watchedUsers String[]           @map("watched_users") @db.Uuid
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamp()
  createdBy    String             @map("created_by") @db.Uuid

  @@id([id])
  @@map("notification")
}

model User {
  id            String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name          String?      @map("name") @db.VarChar()
  phone         String       @map("phone") @db.VarChar()
  image         String?      @map("image") @db.VarChar()
  email         String?      @map("email") @db.VarChar()
  balance       Float?       @map("balance") @db.DoublePrecision
  password      String?      @map("password") @db.VarChar()
  username      String?      @map("username") @db.VarChar()
  smsCode       String?      @map("sms_code") @db.VarChar()
  smsExpireTime String?      @map("sms_time") @db.VarChar()
  userDevices   UserDevice[]
  roles         UserOnRole[]
  Orders        Orders[]

  @@id([id])
  @@unique([phone])
  @@map("user")
}

model UserDevice {
  id           String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userAgent    String? @map("user_agent") @db.VarChar()
  ip           String? @map("ip") @db.VarChar()
  refreshToken String  @map("refresh_token") @db.VarChar()
  accessToken  String  @map("access_token") @db.VarChar()
  userId       String  @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}

model Models {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name       String       @map("name") @db.VarChar()
  permission Permission[]

  @@id([id])
  @@map("models")
}

model Permission {
  id      String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code    String @map("code") @db.VarChar()
  name    String @map("name") @db.VarChar()
  modelId String @map("model_id") @db.Uuid

  model Models @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@unique([code])
  @@map("permission")
}

model Role {
  id          String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String       @map("name") @db.VarChar()
  permissions String[]     @map("permissions") @db.Uuid
  users       UserOnRole[]

  @@id([id])
  @@map("role")
}

model UserOnRole {
  userId     String   @map("user_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  roleId     String   @map("role_id") @db.Uuid
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String   @map("assigned_by") @db.Uuid

  @@id([userId, roleId])
}

model Service {
  id          String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String      @map("name") @db.Uuid
  description String      @map("description") @db.Uuid
  images      String[]    @map("images") @db.VarChar()
  serviceCode ServiceCode @default(recommended) @map("service_code")
  tariffs     Tariff[]

  @@id([id])
  @@map("service")
}

model Tariff {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  type        String @map("type") @db.Uuid
  price       Int    @map("price") @db.Integer
  days        Int    @map("days") @db.Integer
  description String @map("description") @db.Uuid
  service_id  String @map("service_id") @db.Uuid

  service Service  @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Orders  Orders[]

  @@id([id])
  @@map("tariff")
}

model Orders {
  id          String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  cottageId   String      @map("cottage_id") @db.Uuid
  tariffId    String      @map("tariff_id") @db.Uuid
  assignedAt  DateTime    @default(now()) @map("assigned_at")
  end_time    DateTime    @map("end_time")
  status      Status      @default(inactive) @map("status")
  orderStatus OrderStatus @default(progress) @map("order_status")
  assignedBy  String      @map("assigned_by") @db.Uuid

  cottage Cottage @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tariff  Tariff  @relation(fields: [tariffId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User    @relation(fields: [assignedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("orders")
}
