datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator dacha_client {
  provider = "prisma-client-js"
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum MainImage {
  true
  false
}

enum NotificationStatus {
  new
  seen
}

enum CottageStatus {
  progress
  confirmed
  rejected
}

enum NotificationType {
  personal
  public
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  status     Status        @default(inactive) @map("status")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model Region {
  id      String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name    String    @map("name") @db.Uuid
  places  Place[]
  cottage Cottage[]

  @@id([id])
  @@map("region")
}

model Place {
  id       String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String @map("name") @db.Uuid
  image    String @map("image") @db.VarChar()
  regionId String @map("region_id") @db.Uuid

  region  Region    @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cottage Cottage[]

  @@id([id])
  @@map("place")
}

model CottageType {
  id   String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name String @map("name") @db.Uuid

  @@id([id])
  @@map("cottage_type")
}

model Comfort {
  id    String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name  String @map("name") @db.Uuid
  image String @map("image") @db.VarChar()

  @@id([id])
  @@map("comfort")
}

model CottageImage {
  id          String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  image       String    @map("image") @db.VarChar()
  status      Status    @default(active) @map("status")
  isMainImage MainImage @default(false) @map("main_image")
  cottage     Cottage?  @relation(fields: [cottageId], references: [id])
  cottageId   String    @map("cottage_id") @db.Uuid
  created_at  DateTime  @default(now()) @map("created_at") @db.Timestamp()

  @@id([id])
  @@map("cottage_image")
}

model Cottage {
  id            String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name          String        @map("name") @db.Uuid
  rating        Float         @map("rating") @db.Real
  description   String        @map("description") @db.Uuid
  cottageType   String[]      @map("cottage_type")
  cottageStatus CottageStatus @default(progress) @map("cottage_status")
  price         Float         @map("price") @db.Real
  priceWeekend  Float         @map("price_weekend") @db.Real
  status        Status        @default(active) @map("status")
  comforts      String[]      @map("comforts") @db.Uuid
  regionId      String        @map("region_id") @db.Uuid
  placeId       String        @map("place_id") @db.Uuid
  longitude     String        @map("longitude") @db.VarChar()
  lattitude     String        @map("lattitude") @db.VarChar()
  bookedTime    String[]      @map("booked_time") @db.VarChar()
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  createdBy     String        @map("user_id") @db.Uuid

  region Region         @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  place  Place          @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images CottageImage[]

  @@id([id])
  @@map("cottage")
}

model Notification {
  id           String             @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  message      String             @map("message") @db.VarChar()
  type         NotificationType   @default(personal) @map("type")
  status       NotificationStatus @default(new) @map("status")
  userId       String?            @map("user_id") @db.Uuid
  watchedUsers String[]           @map("watched_users") @db.Uuid
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamp()
  createdBy    String             @map("created_by") @db.Uuid

  @@id([id])
  @@map("notification")
}

model User {
  id               String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name             String       @map("name") @db.VarChar()
  phone            String       @map("phone") @db.VarChar()
  balance          Float?       @map("balance") @db.DoublePrecision
  favoriteCottages String[]     @map("favorite_cottages") @db.Uuid
  password         String?      @map("password") @db.VarChar()
  username         String?      @map("username") @db.VarChar()
  userDevices      UserDevice[]

  @@id([id])
  @@map("user")
}

model UserDevice {
  id           String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userAgent    String? @map("user_agent") @db.VarChar()
  ip           String? @map("ip") @db.VarChar()
  refreshToken String  @map("refresh_token") @db.VarChar()
  accessToken  String  @map("access_token") @db.VarChar()
  userId       String  @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}
