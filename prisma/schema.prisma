datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator dacha_client {
  provider = "prisma-client-js"
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum OrderStatus {
  cancelled @map("cancelled")
  progress  @map("progress")
  success   @map("success")
}

enum CottageStatus {
  progress
  confirmed
  rejected
}

enum NotificationType {
  message
  alert
  reminder
  system
}

enum ServiceCode {
  top
  recommended
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  image      String?      @map("image") @db.VarChar()
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  status     Status        @default(inactive) @map("status")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model Region {
  id      String    @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name    String    @map("name") @db.Uuid
  places  Place[]
  cottage Cottage[]

  @@id([id])
  @@map("region")
}

model Place {
  id       String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String @map("name") @db.Uuid
  image    String @map("image") @db.VarChar()
  regionId String @map("region_id") @db.Uuid

  region  Region    @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cottage Cottage[]

  @@id([id])
  @@map("place")
}

model CottageType {
  id       String                @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String                @map("name") @db.Uuid
  cottages Cottage_CottageType[]

  @@id([id])
  @@map("cottage_type")
}

model Cottage_CottageType {
  id            String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  cottageId     String @map("cottage_id") @db.Uuid
  cottageTypeId String @map("cottage_type_id") @db.Uuid

  cottage     Cottage     @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cottageType CottageType @relation(fields: [cottageTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("cottage_cottagetype")
}

model Comfort {
  id       String            @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String            @map("name") @db.Uuid
  image    String            @map("image") @db.VarChar()
  cottages Cottage_Comfort[]

  @@id([id])
  @@map("comfort")
}

model Cottage_Comfort {
  id        String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  cottageId String @map("cottage_id") @db.Uuid
  comfortId String @map("comfort_id") @db.Uuid

  cottage Cottage @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comfort Comfort @relation(fields: [comfortId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("cottage_comfort")
}

model CottageImage {
  id          String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  image       String   @map("image") @db.VarChar()
  status      Status   @default(active) @map("status")
  isMainImage Boolean  @default(false) @map("main_image")
  created_at  DateTime @default(now()) @map("created_at") @db.Timestamp()
  cottageId   String   @map("cottage_id") @db.Uuid

  cottage Cottage @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("cottage_image")
}

model Cottage {
  id            String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name          String        @map("name") @db.VarChar()
  rating        Decimal       @default(4.1) @map("rating") @db.Decimal(3, 2)
  description   String        @map("description") @db.VarChar()
  cottageStatus CottageStatus @default(progress) @map("cottage_status")
  price         Float         @map("price") @db.Real
  priceWeekend  Float         @map("price_weekend") @db.Real
  status        Status        @default(active) @map("status")
  longitude     String?       @map("longitude") @db.VarChar()
  latitude      String?       @map("latitude") @db.VarChar()
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp()
  isTest        Boolean       @default(false) @map("is_test") @db.Boolean
  userId        String        @map("user_id") @db.Uuid
  regionId      String        @map("region_id") @db.Uuid
  placeId       String        @map("place_id") @db.Uuid

  region          Region                @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  place           Place                 @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images          CottageImage[]
  orders          Orders[]
  cottageTypes    Cottage_CottageType[]
  comforts        Cottage_Comfort[]
  premiumCottages Premium_Cottage[]

  @@id([id])
  @@map("cottage")
}

model Premium_Cottage {
  id          String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  priority    Int         @default(1) @map("priority") @db.Integer
  createdAt   DateTime    @default(now()) @map("created_at") @db.Date
  expireAt    DateTime    @map("expire_at") @db.Date
  serviceCode ServiceCode @map("service_code")
  cottageId   String      @map("cottage_id") @db.Uuid

  cottage Cottage @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("premium_cottage")
}

model Notification {
  id        String              @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  message   String              @map("message") @db.VarChar()
  type      NotificationType    @default(message) @map("type")
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime            @default(now()) @updatedAt @map("updated_at")
  users     User_Notification[]

  @@id([id])
  @@map("notification")
}

model User_Notification {
  id             String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  isRead         Boolean @default(false) @map("is_read") @db.Boolean
  userId         String  @map("user_id") @db.Uuid
  notificationId String  @map("notification_id") @db.Uuid

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_notification")
}

model User {
  id       String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name     String? @map("name") @db.VarChar()
  phone    String  @map("phone") @db.VarChar()
  image    String? @map("image") @db.VarChar()
  email    String? @map("email") @db.VarChar()
  password String? @map("password") @db.VarChar()
  username String? @map("username") @db.VarChar()

  userDevices   UserDevice[]
  roles         User_Role[]
  orders        Orders[]
  cottages      Cottage[]
  notifications User_Notification[]
  userOtps      User_Otp[]

  @@id([id])
  @@unique([phone])
  @@map("user")
}

model User_Otp {
  id        String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  otp       String   @map("otp") @db.VarChar(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Date
  expiresAt DateTime @map("expires_at") @db.Date
  isUsed    Boolean  @default(false) @map("is_used") @db.Boolean
  userId    String   @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_otp")
}

model UserDevice {
  id            String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  deviceId      String?  @map("device_id") @db.VarChar()
  refreshToken  String?  @map("refresh_token") @db.VarChar()
  accessToken   String?  @map("access_token") @db.VarChar()
  deviceType    String?  @map("device_type") @db.VarChar()
  deviceName    String?  @map("device_name") @db.VarChar()
  platform      String?  @map("platform") @db.VarChar()
  tokenExpireAt DateTime @map("token_expire_at") @db.Date
  createdAt     DateTime @default(now()) @map("created_at") @db.Date
  lastLogin     DateTime @map("last_login") @db.Date
  isActive      Boolean  @default(true) @map("is_active") @db.Boolean

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}

model Models {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name       String       @map("name") @db.VarChar()
  permission Permission[]

  @@id([id])
  @@map("models")
}

model Permission {
  id      String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code    String @map("code") @db.VarChar()
  name    String @map("name") @db.VarChar()
  modelId String @map("model_id") @db.Uuid

  model Models            @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles Role_Permission[]

  @@id([id])
  @@unique([code])
  @@map("permission")
}

model Role {
  id          String            @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String            @map("name") @db.VarChar()
  createdAt   DateTime          @default(now()) @map("created_at") @db.Date
  users       User_Role[]
  permissions Role_Permission[]

  @@id([id])
  @@map("role")
}

model Role_Permission {
  id           String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  roleId       String @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("role_permission")
}

model User_Role {
  id        String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([id])
  @@map("user_role")
}

model Service {
  id          String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String      @map("name") @db.Uuid
  description String      @map("description") @db.Uuid
  images      String[]    @map("images") @db.VarChar()
  serviceCode ServiceCode @map("service_code")
  tariffs     Tariff[]

  @@id([id])
  @@map("service")
}

model Tariff {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  type        String @map("type") @db.Uuid
  price       Int    @map("price") @db.Integer
  days        Int    @map("days") @db.Integer
  description String @map("description") @db.Uuid
  service_id  String @map("service_id") @db.Uuid

  service Service  @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders  Orders[]

  @@id([id])
  @@map("tariff")
}

model Orders {
  id          String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  createdAt   DateTime    @default(now()) @map("created_at")
  expireAt    DateTime    @map("expire_at")
  status      Status      @default(inactive) @map("status")
  orderStatus OrderStatus @default(progress) @map("order_status")
  cottageId   String      @map("cottage_id") @db.Uuid
  tariffId    String      @map("tariff_id") @db.Uuid
  userId      String      @map("assigned_by") @db.Uuid

  cottage Cottage @relation(fields: [cottageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tariff  Tariff  @relation(fields: [tariffId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("orders")
}
